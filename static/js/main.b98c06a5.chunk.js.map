{"version":3,"sources":["hooks/useD3.js","components/ScaledD3Container.js","d3-plus/index.js","components/GdpChart/GdpChart.d3.js","components/GdpChart/index.js","components/App.js","serviceWorker.js","index.js"],"names":["useD3","fn","ref","useRef","useEffect","d3","current","SvgContainer","styled","div","ScaledD3Container","drawSvg","viewBox","width","height","draw","useCallback","container","svg","append","attr","_d3","tip","_d3Tip","selection","prototype","appendForEach","obj","data","this","selectAll","enter","d3GdpChart","svgWidth","svgHeight","xMin","yMin","xMax","yMax","json","then","map","dateString","gdp","date","Date","dateScale","scaleTime","domain","min","max","range","gdpScale","scaleLinear","forEach","datum","x","y","call","axisBottom","ticks","tickFormat","timeFormat","style","tickSize","axisLeft","barWidth","Math","ceil","length","formatter","Intl","NumberFormat","currency","minimumFractionDigits","direction","offset","html","moment","format","on","show","hide","line","FullScreenContainer","marginTop","GdpChart","useDimensions","id","App","useFccTest","fccTest","FccTests","bar_chart","queryParam","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b98c06a5.chunk.js","sourcesContent":["import * as d3 from 'd3';\nimport { useRef, useEffect } from 'react';\n\nconst useD3 = (fn) => {\n    const ref = useRef();\n\n    useEffect(\n        () => fn(d3.select(ref.current)),\n        [fn]\n    );\n\n    return ref;\n};\n\nexport default useD3;","import React, { useCallback } from 'react';\nimport useD3 from '../hooks/useD3';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst SvgContainer = styled.div`\n    display: block;\n    width: 100%;\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    svg {\n        display: block;\n        width: 100%;\n        height: 100%;\n    }\n`;\n\nconst ScaledD3Container = ({ drawSvg, viewBox: { width = 100, height = 100 } }) => {\n    const draw = useCallback(container => {\n        const svg = container.append('svg')\n            .attr('preserveAspectRatio', 'xMidYMid meet')\n            .attr('viewBox', `0 0 ${width} ${height}`);\n\n        drawSvg(svg, width, height);\n    }, [drawSvg, width, height]);\n    \n    const ref = useD3(draw);\n\n    return (\n        <SvgContainer ref={ref} />\n    );\n};\n\nScaledD3Container.propTypes = {\n    drawSvg: PropTypes.func.isRequired,\n    viewBox: PropTypes.shape({\n        width: PropTypes.number,\n        height: PropTypes.number\n    })\n};\n\nexport default ScaledD3Container;","import * as _d3 from 'd3';\nimport _d3Tip from 'd3-tip';\n\nconst d3 = {..._d3, tip: _d3Tip};\n\nd3.selection.prototype.appendForEach = function (obj, data) { \n    return this.selectAll(null).data(data).enter().append(obj);\n};\n\nexport default d3;\n","import d3 from '../../d3-plus';\nimport moment from 'moment';\n\nconst gdpDataUrl = 'https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json';\n\nconst d3GdpChart = (svg, svgWidth, svgHeight) => {\n    const padding = { top: 15, right: 35, bottom: 80, left: 80 };\n\n    const xMin = padding.left;\n    const yMin = padding.top;\n    const width = svgWidth - xMin - padding.right;\n    const height = svgHeight - yMin - padding.bottom;\n    const xMax = xMin + width;\n    const yMax = yMin + height;\n\n    d3.json(gdpDataUrl).then(({ data: rawData }) => {\n        const data = rawData.map(([dateString, gdp]) => ({ dateString, date: new Date(dateString), gdp }));\n\n        const dateScale = d3.scaleTime()\n            .domain([d3.min(data, ({ date }) => date), d3.max(data, ({ date }) => date)])\n            .range([xMin, xMax]);\n\n        const gdpScale = d3.scaleLinear()\n            .domain([d3.max(data, ({ gdp }) => gdp), 0])\n            .range([yMin, yMax]);\n\n        data.forEach(datum => {\n            datum.x = dateScale(datum.date);\n            datum.y = gdpScale(datum.gdp);\n        });\n\n        svg.append('g')\n            .attr('id', 'x-axis')\n            .attr('transform', `translate(0, ${yMax})`)\n            .call(d3.axisBottom(dateScale).ticks(30).tickFormat(d3.timeFormat('%Y')))\n            .selectAll('text')\n            .style('text-anchor', 'end')\n            .attr('dx', '2.9em')\n            .attr('dy', '-0.3em')\n            .attr('transform', 'scale(2.5) rotate(70)');\n\n        svg.append('g')\n            .attr('transform', `translate(0, ${yMax})`)\n            .attr('class', 'grid')\n            .call(d3.axisBottom(dateScale).ticks(30).tickFormat('').tickSize(-height));\n\n        svg.append('g')\n            .attr('id', 'y-axis')\n            .attr('transform', `translate(${xMin}, 0)`)\n            .call(d3.axisLeft(gdpScale))\n            .selectAll('text')\n            .style('text-anchor', 'end')\n            .attr('dx', '0.3em')\n            .attr('dy', '-0.1em')\n            .attr('transform', 'scale(2.5) rotate(-45)');\n\n        svg.append('g')\n            .attr('transform', `translate(${xMin}, 0)`)\n            .attr('class', 'grid')\n            .call(d3.axisLeft(gdpScale).tickFormat('').tickSize(-width));\n\n        const barWidth = Math.ceil(width / data.length);\n\n        const formatter = new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD',\n            minimumFractionDigits: 2\n        });\n\n        const tip = d3.tip()\n            .direction('n')\n            .offset(({ x, y }) => [\n                Math.max(0, yMin + 40 - y),\n                Math.min(0, xMax - 70 - x)\n            ])\n            .attr('id', 'tooltip')\n            .attr('data-date', ({ dateString }) => dateString)\n            .html(({ gdp, date }) => `${moment(date).format('MMM YYYY')}<br/>${formatter.format(gdp)} Billion`);\n        svg.call(tip);\n\n        svg.appendForEach('rect', data)\n            .attr('class', 'bar')\n            .attr('x', ({ x }) => x)\n            .attr('width', barWidth)\n            .attr('y', ({ y }) => y)\n            .attr('height', ({ y }) => yMax - y)\n            .attr('data-date', ({ dateString }) => dateString)\n            .attr('data-gdp', ({ gdp }) => gdp)\n            .on('mouseover', tip.show)\n            .on('mouseout', tip.hide);\n\n        svg.append('path')\n            .datum(data)\n            .attr('class', 'gdpLine')\n            .attr('d', d3.line()\n                .x(({ x }) => x)\n                .y(({ y }) => y)\n            );\n\n\n    });\n\n\n    svg.append('rect')\n        .attr('id', 'background')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', svgWidth)\n        .attr('height', svgHeight);\n\n\n\n\n\n\n    // svg.append('rect')\n    //     .attr('x', 0)\n    //     .attr('y', 0)\n    //     .attr('width', height / 4)\n    //     .attr('height', height / 4)\n    //     .attr('style', 'fill:rgb(0,0,255)');\n\n    // svg.append('rect')\n    //     .attr('x', height / 2)\n    //     .attr('y', height / 2)\n    //     .attr('width', height / 2)\n    //     .attr('height', height / 2)\n    //     .attr('style', 'fill:rgb(255,0,0)');\n\n    // svg.append('rect')\n    //     .attr('x', 0)\n    //     .attr('y', height / 2)\n    //     .attr('width', height / 2)\n    //     .attr('height', height / 2)\n    //     .attr('style', 'fill:rgb(0,255,0)');\n\n    // svg.append('rect')\n    //     .attr('x', width - height / 2)\n    //     .attr('y', height / 2)\n    //     .attr('width', height / 2)\n    //     .attr('height', height / 2)\n    //     .attr('style', 'fill:rgb(100,100,100)');\n};\n\nexport default d3GdpChart;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ScaledD3Container from '../ScaledD3Container';\nimport d3GdpChart from './GdpChart.d3';\nimport './GdpChart.css';\nimport useDimensions from 'react-use-dimensions';\n\nconst FullScreenContainer = styled.div`\n    padding: 10px;\n    height: calc(100vh - ${({marginTop}) => `${marginTop}px`});\n`;\n\nconst GdpChart = () => {\n    const [ref, {height}] = useDimensions();\n\n    return (\n        <>\n            <h1 id='title' ref={ref}>U.S. Gross Domestic Product (GDP)</h1>\n            <FullScreenContainer marginTop={height + 30}>\n                <ScaledD3Container drawSvg={d3GdpChart} viewBox={{ width: 1600, height: 900 }} />\n            </FullScreenContainer>\n        </>\n    );\n};\n\nexport default GdpChart;\n","import React from 'react';\nimport GdpChart from './GdpChart';\nimport { useFccTest, FccTests } from '@asteffey/react-fcc-test';\n\nconst App = () => {\n    useFccTest({\n        fccTest: FccTests.bar_chart,\n        queryParam: 'fcc-test'\n    });\n\n    return (\n        <main>\n            <GdpChart />\n        </main>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}